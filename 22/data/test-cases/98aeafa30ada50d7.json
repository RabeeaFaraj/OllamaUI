{"uid":"98aeafa30ada50d7","name":"test_page_title","fullName":"tests.test_example.ExampleTestCase#test_page_title","historyId":"08113798f7a60200b56684ee8d9be881","time":{"start":1757571111397,"stop":1757571123573,"duration":12176},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=140.0.7339.80)\nStacktrace:\n#0 0x55ff9c44794a <unknown>\n#1 0x55ff9bebc8a0 <unknown>\n#2 0x55ff9beb3ce8 <unknown>\n#3 0x55ff9bea51b6 <unknown>\n#4 0x55ff9bea6f00 <unknown>\n#5 0x55ff9bea555e <unknown>\n#6 0x55ff9bea4ee7 <unknown>\n#7 0x55ff9bea4bc5 <unknown>\n#8 0x55ff9bea2a42 <unknown>\n#9 0x55ff9bea322a <unknown>\n#10 0x55ff9bebfdb9 <unknown>\n#11 0x55ff9bf5a835 <unknown>\n#12 0x55ff9bf34032 <unknown>\n#13 0x55ff9bf59c23 <unknown>\n#14 0x55ff9bf33e03 <unknown>\n#15 0x55ff9bf00968 <unknown>\n#16 0x55ff9bf015e1 <unknown>\n#17 0x55ff9c40b548 <unknown>\n#18 0x55ff9c40f272 <unknown>\n#19 0x55ff9c3f2313 <unknown>\n#20 0x55ff9c40fdc5 <unknown>\n#21 0x55ff9c3d749f <unknown>\n#22 0x55ff9c434158 <unknown>\n#23 0x55ff9c434332 <unknown>\n#24 0x55ff9c446a53 <unknown>\n#25 0x7f461469caa4 <unknown>\n#26 0x7f4614729c3c <unknown>","statusTrace":"self = <test_example.ExampleTestCase testMethod=test_page_title>\n\n    def test_page_title(self):\n>       self.home.open(OLLAMA_URL)\n\ntests/test_example.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:22: in open\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc9edfd6d10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#24 0x55ff9c446a53 \\\\u003Cunknown>\\\\n#25 0x7f461469caa4 \\\\u003Cunknown>\\\\n#26 0x7f4614729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=140.0.7339.80)\nE       Stacktrace:\nE       #0 0x55ff9c44794a <unknown>\nE       #1 0x55ff9bebc8a0 <unknown>\nE       #2 0x55ff9beb3ce8 <unknown>\nE       #3 0x55ff9bea51b6 <unknown>\nE       #4 0x55ff9bea6f00 <unknown>\nE       #5 0x55ff9bea555e <unknown>\nE       #6 0x55ff9bea4ee7 <unknown>\nE       #7 0x55ff9bea4bc5 <unknown>\nE       #8 0x55ff9bea2a42 <unknown>\nE       #9 0x55ff9bea322a <unknown>\nE       #10 0x55ff9bebfdb9 <unknown>\nE       #11 0x55ff9bf5a835 <unknown>\nE       #12 0x55ff9bf34032 <unknown>\nE       #13 0x55ff9bf59c23 <unknown>\nE       #14 0x55ff9bf33e03 <unknown>\nE       #15 0x55ff9bf00968 <unknown>\nE       #16 0x55ff9bf015e1 <unknown>\nE       #17 0x55ff9c40b548 <unknown>\nE       #18 0x55ff9c40f272 <unknown>\nE       #19 0x55ff9c3f2313 <unknown>\nE       #20 0x55ff9c40fdc5 <unknown>\nE       #21 0x55ff9c3d749f <unknown>\nE       #22 0x55ff9c434158 <unknown>\nE       #23 0x55ff9c434332 <unknown>\nE       #24 0x55ff9c446a53 <unknown>\nE       #25 0x7f461469caa4 <unknown>\nE       #26 0x7f4614729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase","time":{"start":1757571111396,"stop":1757571111396,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=140.0.7339.80)\nStacktrace:\n#0 0x55ff9c44794a <unknown>\n#1 0x55ff9bebc8a0 <unknown>\n#2 0x55ff9beb3ce8 <unknown>\n#3 0x55ff9bea51b6 <unknown>\n#4 0x55ff9bea6f00 <unknown>\n#5 0x55ff9bea555e <unknown>\n#6 0x55ff9bea4ee7 <unknown>\n#7 0x55ff9bea4bc5 <unknown>\n#8 0x55ff9bea2a42 <unknown>\n#9 0x55ff9bea322a <unknown>\n#10 0x55ff9bebfdb9 <unknown>\n#11 0x55ff9bf5a835 <unknown>\n#12 0x55ff9bf34032 <unknown>\n#13 0x55ff9bf59c23 <unknown>\n#14 0x55ff9bf33e03 <unknown>\n#15 0x55ff9bf00968 <unknown>\n#16 0x55ff9bf015e1 <unknown>\n#17 0x55ff9c40b548 <unknown>\n#18 0x55ff9c40f272 <unknown>\n#19 0x55ff9c3f2313 <unknown>\n#20 0x55ff9c40fdc5 <unknown>\n#21 0x55ff9c3d749f <unknown>\n#22 0x55ff9c434158 <unknown>\n#23 0x55ff9c434332 <unknown>\n#24 0x55ff9c446a53 <unknown>\n#25 0x7f461469caa4 <unknown>\n#26 0x7f4614729c3c <unknown>","statusTrace":"self = <test_example.ExampleTestCase testMethod=test_page_title>\n\n    def test_page_title(self):\n>       self.home.open(OLLAMA_URL)\n\ntests/test_example.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:22: in open\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc9edfd6d10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#24 0x55ff9c446a53 \\\\u003Cunknown>\\\\n#25 0x7f461469caa4 \\\\u003Cunknown>\\\\n#26 0x7f4614729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=140.0.7339.80)\nE       Stacktrace:\nE       #0 0x55ff9c44794a <unknown>\nE       #1 0x55ff9bebc8a0 <unknown>\nE       #2 0x55ff9beb3ce8 <unknown>\nE       #3 0x55ff9bea51b6 <unknown>\nE       #4 0x55ff9bea6f00 <unknown>\nE       #5 0x55ff9bea555e <unknown>\nE       #6 0x55ff9bea4ee7 <unknown>\nE       #7 0x55ff9bea4bc5 <unknown>\nE       #8 0x55ff9bea2a42 <unknown>\nE       #9 0x55ff9bea322a <unknown>\nE       #10 0x55ff9bebfdb9 <unknown>\nE       #11 0x55ff9bf5a835 <unknown>\nE       #12 0x55ff9bf34032 <unknown>\nE       #13 0x55ff9bf59c23 <unknown>\nE       #14 0x55ff9bf33e03 <unknown>\nE       #15 0x55ff9bf00968 <unknown>\nE       #16 0x55ff9bf015e1 <unknown>\nE       #17 0x55ff9c40b548 <unknown>\nE       #18 0x55ff9c40f272 <unknown>\nE       #19 0x55ff9c3f2313 <unknown>\nE       #20 0x55ff9c40fdc5 <unknown>\nE       #21 0x55ff9c3d749f <unknown>\nE       #22 0x55ff9c434158 <unknown>\nE       #23 0x55ff9c434332 <unknown>\nE       #24 0x55ff9c446a53 <unknown>\nE       #25 0x7f461469caa4 <unknown>\nE       #26 0x7f4614729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","steps":[{"name":"Test metadata","time":{"start":1757571111397,"stop":1757571111397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase::0","time":{"start":1757571124215,"stop":1757571124215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"browser","value":"chrome"},{"name":"resolution","value":"chrome-mobile"},{"name":"screen","value":"375x667"},{"name":"environment","value":"staging"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_example"},{"name":"subSuite","value":"ExampleTestCase"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2538-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_example"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"environment","value":"'staging'"},{"name":"resolution","value":"'chrome-mobile'"},{"name":"screen","value":"'375x667'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"98aeafa30ada50d7.json","parameterValues":["'chrome'","'staging'","'chrome-mobile'","'375x667'"]}